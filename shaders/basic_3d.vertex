

layout (location = 0) in ivec2 in_stuff;
layout (location = 1) in float in_mix_weight;
layout (location = 2) in float in_rotation;
layout (location = 3) in vec2 in_origin_offset;
layout (location = 4) in vec2 in_draw_size;
layout (location = 5) in vec2 in_texture_size;
layout (location = 6) in vec2 in_uv_min;
layout (location = 7) in vec2 in_uv_max;
layout (location = 8) in vec3 in_pos;
layout (location = 9) in vec4 in_color;
layout (location = 10) in vec4 in_mix_color;
layout (location = 11) in mat4 in_model;


flat out int v_flags;
flat out int v_effect_id;
out float v_mix_weight;
out float v_rotation;
out vec3 v_pos;
out vec2 v_origin_offset;
out vec2 v_draw_size;
out vec2 v_texture_size;
out vec2 v_uv_min;
out vec2 v_uv_max;
out vec4 v_color;
out vec4 v_mix_color;
flat out vec3 v_normal;

out vec2 v_local_uv;
out vec2 v_uv;

uniform vec2 base_res;
uniform vec2 window_size;
uniform mat4 view_projection;

mat2 rot(float angle)
{
	float c = cos(-angle);
	float s = sin(-angle);
	return mat2(c, -s, s, c);
}


const float size = 0.5;

const vec3 vertices[24] = vec3[](
	// front
	vec3(-size, size,  -size), vec3(size, size,  -size),
	vec3(size,  -size,  -size), vec3(-size,  -size,  -size),

	// back
	vec3(size, size,  size), vec3(-size, size,  size),
	vec3(-size,  -size,  size), vec3(size,  -size,  size),

	// top
	vec3(-size, size,  size), vec3(size, size,  size),
	vec3(size,  size,  -size), vec3(-size,  size,  -size),

	// bottom
	vec3(-size, -size,  -size), vec3(size, -size,  -size),
	vec3(size,  -size,  size), vec3(-size,  -size,  size),

	// left
	vec3(-size, size,  size), vec3(-size, size,  -size),
	vec3(-size,  -size,  -size), vec3(-size,  -size,  size),

	// right
	vec3(size, size,  -size), vec3(size, size,  size),
	vec3(size,  -size,  size), vec3(size,  -size,  -size)
);

const vec2 local_uv[24] = vec2[](
	// front
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0),

	// back
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0),

	// top
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0),

	// bottom
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0),

	// left
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0),

	// right
	vec2(0.0, 0.0), vec2(1.0, 0.0),
	vec2(1.0, 1.0), vec2(0.0, 1.0)
);

const vec3 normals[6] = vec3[6](
	vec3(0.0, 0.0, -1.0),
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, -1.0, 0.0),
	vec3(-1.0, 0.0, 0.0),
	vec3(1.0, 0.0, 0.0)
);


void main()
{

	int in_flags = in_stuff.x;
	int in_effect_id = in_stuff.y;

	float min_uv_x = (in_flags & 2) != 0 ? in_uv_max.x : in_uv_min.x;
	float max_uv_x = (in_flags & 2) != 0 ? in_uv_min.x : in_uv_max.x;
	vec2 topleft = vec2(
		min_uv_x,
		in_uv_min.y
	);
	vec2 topright = vec2(
		max_uv_x,
		in_uv_min.y
	);
	vec2 bottomright = vec2(
		max_uv_x,
		in_uv_max.y
	);
	vec2 bottomleft = vec2(
		min_uv_x,
		in_uv_max.y
	);

	vec2 uvs[6];
	uvs[0] = topleft;
	uvs[1] = topright;
	uvs[2] = bottomright;
	uvs[3] = topleft;
	uvs[4] = bottomright;
	uvs[5] = bottomleft;

	v_flags = in_flags;
	v_effect_id = in_effect_id;
	v_mix_weight = in_mix_weight;
	v_rotation = in_rotation;
	v_pos = in_pos;
	v_origin_offset = in_origin_offset;
	v_draw_size = in_draw_size;
	v_texture_size = in_texture_size;
	v_uv_min = in_uv_min;
	v_uv_max = in_uv_max;
	v_color = in_color;
	v_mix_color = in_mix_color;

	vec3 vertex = vertices[gl_VertexID];
	// vec2 uv = vertex.xy + vec2(0.5);
	// v_uv = uv;
	// v_local_uv = uv;
	v_uv = local_uv[gl_VertexID];
	v_local_uv = local_uv[gl_VertexID];
	int face_index = gl_VertexID / 6;
	v_normal = normals[face_index];

	gl_Position = view_projection * in_model * vec4(vertex, 1.0);
}
