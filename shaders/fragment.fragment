
flat in int v_flags;
flat in int v_effect_id;
in float v_mix_weight;
in vec3 v_pos;
in vec2 v_origin_offset;
in vec2 v_draw_size;
in vec2 v_texture_size;
in vec2 v_uv_min;
in vec2 v_uv_max;
in vec4 v_color;
in vec4 v_mix_color;

in vec2 v_uv;
in vec2 v_local_uv;

out vec4 out_color;

uniform vec2 window_size;
uniform float time;
uniform vec2 player_pos;
uniform vec2 mouse;
uniform vec2 u_base_res;


uniform sampler2D in_texture;
uniform sampler2D noise;
uniform vec3 cam_pos;

#define pi 3.1415

mat2 rot(float angle)
{
	float c = cos(-angle);
	float s = sin(-angle);
	return mat2(c, -s, s, c);
}

vec2 n22(vec2 p)
{
	vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));
	a += dot(a, a + 34.45);
	return fract(vec2(a.x * a.y, a.y * a.z));
}

float range_lerp(float val, float amin, float amax, float bmin, float bmax)
{
	float p = (val - amin) / (amax - amin);
	return bmin + (bmax - bmin) * p;
}

float sin_range(float min_val, float max_val, float x)
{
	return range_lerp(sin(x), -1.0, 1.0, min_val, max_val);
}

float sin2(float s)
{
	return sin(s) * 0.5 + 0.5;
}

vec4 pma(vec4 col)
{
	return vec4(col.rgb * col.a, col.a);
}

bool point_in_rect_topleft(vec2 point, vec2 pos, vec2 size)
{
	return point.x >= pos.x && point.x <= pos.x + size.x && point.y >= pos.y && point.y <= pos.y + size.y;
}

vec3 circle(vec2 pos, vec2 uv, float radius)
{
	vec2 ar = vec2(1.0, u_base_res.y / u_base_res.x);
	pos *= ar;
	uv *= ar;
	float d = distance(pos, uv);
	d = smoothstep(radius, 0.0, d);
	// return vec3(d * 0.1, d * 0.4, d);
	return vec3(d);
}

float luminance(vec3 v)
{
	return v.r * 0.2126 + v.g * 0.7152 + v.b * 0.0722;
}

void main()
{
	vec4 color;
	vec4 texture_color;

	if((v_flags & 1) != 0) {
		texture_color = texture(in_texture, v_uv);
		if((v_flags & 8) != 0) {
			color = vec4(1.0, 1.0, 1.0, texture_color.r) * v_color;
		}
		else {
			color = texture_color * v_color;
		}
		color.rgb = mix(color.rgb, v_mix_color.rgb, v_mix_weight);
	}
	else {
		color = v_color;
		color.rgb = mix(color.rgb, v_mix_color.rgb, v_mix_weight);
	}

	if((v_flags & 4) != 0) {
		float smoothness = v_draw_size.y;
		float d = distance(v_local_uv, vec2(0.5));
		color.a *= smoothstep(0.49, smoothness, d);
	}

	if(v_effect_id == 2) {
		float r = time;
		float d1 = distance(v_local_uv, vec2(0.5));
		color.rgb = v_color.rgb;
		color.a = smoothstep(0.49, 0.45, d1);

		float d2 = distance(v_local_uv, vec2(0.7, 0.35));
		float s = smoothstep(0.4, 0.2, d2);
		color.rgb += vec3(s) * 0.3;
		float n = texture(in_texture, (v_uv + v_texture_size * -1.0 * 0.0002) * 0.2).r;
		n = clamp(n + 0.5, 0.0, 1.0);
		color.rgb *= n;
		// color.rgb *= n;
	}

	else if(v_effect_id == 3) {
		color.rgb = vec3(0.0);
		vec2 ar = vec2(1.0, u_base_res.x / u_base_res.y);
		vec2 uv = v_local_uv;

		for(int layer = 0; layer < 2; layer += 1) {
			float t = time * (1.0 + float(layer) * 0.5);
			float size = 4.0 - float(layer) * 2.0;
			for(int i = 0; i < 20; i += 1) {
				vec2 r = n22(vec2((float(i)+1.0)*123.0, (float(i)+1.0)*54321.0));
				float d = distance(fract(uv*size+vec2(-t*0.01 + float(layer) * 0.2, t * 0.13)+r), vec2(0.5));
				float bottom = 1.0 - (uv.y + -0.1 + sin2(t * 0.25) * 0.15);
				float temp_x = uv.x;
				temp_x += sin(time * 2.1 + uv.y * 25.0) * 0.1;
				bottom *= abs((temp_x) * 2.0 - 1.0) * 20.0;
				bottom = clamp(bottom, 0.0, 1.0);
				float l = 0.0005/(d*d*bottom);
				color.rgb += vec3(l * r.x, l * r.y, l * (r.x + r.y - 0.2));
				color.rgb = min(color.rgb, vec3(1.0, 1.0, 1.0));
			}
			color.rgb *= 0.4 + (float(layer) * 0.1);
			color.rgb *= uv.y * uv.y;
		}
		// color.rgb = pow(color.rgb, vec3(2.2));
		color *= v_color;
	}

	else if(v_effect_id == 5) {
		color.rgb = vec3(0.0);
		vec2 uv = v_local_uv;
		float center = 0.5;
		center += sin(uv.x * 21.2 + time * 20.0) * 0.1;
		float d = abs(uv.y - center);
		float s0 = smoothstep(0.2, 0.1, d);
		float s1 = smoothstep(0.5, 0.2, d);
		color.rgb += vec3(s0);
		color += v_color * s1;

		vec2 p = vec2(gl_FragCoord.x, u_base_res.y - gl_FragCoord.y);
		d = distance(v_pos.xy, p);
		d = min(distance(v_draw_size, p), d);
		color.a *= smoothstep(0.0, 32.0, d);
		// color.a *= smoothstep(64.0, 0.0, d);
	}

	// @Note(tkap, 31/05/2024): Light
	else if(v_effect_id == 6) {
		float d = distance(v_local_uv, vec2(0.5));
		float max_d = 0.75;
		// d /= 64;
		// d = d * d;
		// d = 1.0 / d;
		d = smoothstep(max_d * 0.2, max_d * 0.1, d);
		color.r = v_color.r * d;
		color.g = v_color.g * d;
		color.b = v_color.b * d;
	}

	else if(v_effect_id == 8) {
		float d = distance(vec2(0.5), v_local_uv);
		if(d <= 0.4) { discard; }
	}

	color = pma(color);
	if(color.a <= 0.0) { discard; }

	out_color = color;
}
