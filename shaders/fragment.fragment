
flat in int v_flags;
flat in int v_layer;
flat in int v_sublayer;
flat in int v_effect_id;
in float v_mix_weight;
in vec2 v_pos;
in vec2 v_origin_offset;
in vec2 v_draw_size;
in vec2 v_texture_size;
in vec2 v_uv_min;
in vec2 v_uv_max;
in vec4 v_color;
in vec4 v_mix_color;

in vec2 v_uv;
in vec2 v_local_uv;

out vec4 out_color;

uniform vec2 base_res;
uniform vec2 window_size;
uniform float time;
uniform vec2 player_pos;
uniform vec2 mouse;
uniform vec2 snake_pos;
uniform float snake_apple_time;

uniform sampler2D in_texture;
uniform sampler2D noise;

mat2 rot(float angle)
{
	float c = cos(-angle);
	float s = sin(-angle);
	return mat2(c, -s, s, c);
}

vec2 n22(vec2 p)
{
	vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));
	a += dot(a, a + 34.45);
	return fract(vec2(a.x * a.y, a.y * a.z));
}

float range_lerp(float val, float amin, float amax, float bmin, float bmax)
{
	float p = (val - amin) / (amax - amin);
	return bmin + (bmax - bmin) * p;
}

float sin2(float s)
{
	return sin(s) * 0.5 + 0.5;
}

vec4 pma(vec4 col)
{
	return vec4(col.rgb * col.a, col.a);
}

bool point_in_rect_topleft(vec2 point, vec2 pos, vec2 size)
{
	return point.x >= pos.x && point.x <= pos.x + size.x && point.y >= pos.y && point.y <= pos.y + size.y;
}

vec3 circle(vec2 pos, vec2 uv, float radius)
{
	vec2 ar = vec2(1.0, base_res.y / base_res.x);
	pos *= ar;
	uv *= ar;
	float d = distance(pos, uv);
	d = smoothstep(radius, 0.0, d);
	// return vec3(d * 0.1, d * 0.4, d);
	return vec3(d);
}

void main()
{
	vec4 color;

	if((v_flags & 1) != 0) {
		vec4 c = texture(in_texture, v_uv);
		if((v_flags & 8) != 0) {
			color = vec4(1.0, 1.0, 1.0, c.r) * v_color;
		}
		else {
			color = c * v_color;
		}
		color.rgb = mix(color.rgb, v_mix_color.rgb, v_mix_weight);
	}
	else {
		color = v_color;
		color.rgb = mix(color.rgb, v_mix_color.rgb, v_mix_weight);
	}

	if((v_flags & 4) != 0) {
		float d = distance(v_local_uv, vec2(0.5));
		color.a = smoothstep(0.49, 0.4, d);
	}

	if(v_effect_id == 1)
	{
		vec2 uv = v_uv * 2.0 - 1.0;
		vec2 fuv = uv * 10.0 * range_lerp(sin(time), -1.0, 1.0, 0.9, 1.0);
		fuv.x += cos(time * 0.3);
		fuv.y += sin(time * 0.3);
		vec2 iduv = fuv;
		vec2 noiseuv = fuv;
		uv = fract(fuv);
		// uv *= 2.0 - 1.0;
		ivec2 ids = ivec2(floor(iduv));
		vec2 r = n22(vec2(ids));
		float n = texture(in_texture, noiseuv * 0.5).r;
		n = min(1.0, n + 0.2);
		n = pow(n, 0.5);
		float s1 = smoothstep(1.0, 0.8 * sin2(time * 0.5), uv.x);
		float s2 = smoothstep(1.0, 0.8, uv.y);
		color.rgb = vec3(0);
		color.r += r.x * s1 * s2;
		color.g += r.y * s1 * s2;
		color.rgb *= n;
		color.rgb *= 0.3;

		vec2 snake_normalized = snake_pos / base_res;
		float d = distance(v_local_uv, snake_normalized);
		float light = 0.1/(d*d);
		color.r *= light * 1.0;
		color.g *= (light + snake_apple_time * 2.0) * 1.0;
		color.b *= light * 1.0;
	}

	color = pma(color);

	if(color.a <= 0.0) { discard; }

	out_color = color;
}
