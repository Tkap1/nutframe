
flat in int v_flags;
flat in int v_effect_id;
in float v_mix_weight;
in vec3 v_pos;
in vec2 v_origin_offset;
in vec2 v_draw_size;
in vec2 v_texture_size;
in vec2 v_uv_min;
in vec2 v_uv_max;
in vec4 v_color;
in vec4 v_mix_color;

in vec2 v_uv;
in vec2 v_local_uv;

out vec4 out_color;

uniform vec2 window_size;
uniform float time;
uniform vec2 player_pos;
uniform vec2 mouse;
uniform vec2 u_base_res;


uniform sampler2D in_texture;
uniform sampler2D noise;
uniform vec3 cam_pos;

#define pi 3.1415

mat2 rot(float angle)
{
	float c = cos(-angle);
	float s = sin(-angle);
	return mat2(c, -s, s, c);
}

vec2 n22(vec2 p)
{
	vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));
	a += dot(a, a + 34.45);
	return fract(vec2(a.x * a.y, a.y * a.z));
}

float range_lerp(float val, float amin, float amax, float bmin, float bmax)
{
	float p = (val - amin) / (amax - amin);
	return bmin + (bmax - bmin) * p;
}

float sin_range(float min_val, float max_val, float x)
{
	return range_lerp(sin(x), -1.0, 1.0, min_val, max_val);
}

float sin2(float s)
{
	return sin(s) * 0.5 + 0.5;
}

vec4 pma(vec4 col)
{
	return vec4(col.rgb * col.a, col.a);
}

bool point_in_rect_topleft(vec2 point, vec2 pos, vec2 size)
{
	return point.x >= pos.x && point.x <= pos.x + size.x && point.y >= pos.y && point.y <= pos.y + size.y;
}

vec3 circle(vec2 pos, vec2 uv, float radius)
{
	vec2 ar = vec2(1.0, u_base_res.y / u_base_res.x);
	pos *= ar;
	uv *= ar;
	float d = distance(pos, uv);
	d = smoothstep(radius, 0.0, d);
	// return vec3(d * 0.1, d * 0.4, d);
	return vec3(d);
}

float luminance(vec3 v)
{
	return v.r * 0.2126 + v.g * 0.7152 + v.b * 0.0722;
}

void main()
{
	vec4 color;
	vec4 texture_color;
	vec4 in_color = vec4(v_color.rgb * v_color.a, v_color.a);
	vec4 mix_color = vec4(v_mix_color.rgb, 1.0);

	if((v_flags & 1) != 0) {
		texture_color = texture(in_texture, v_uv);
		if((v_flags & 8) != 0) {
			mix_color *= texture_color.r;
			color = vec4(texture_color.r) * in_color;
		}
		else {
			mix_color *= texture_color.a * in_color.a;
			color = texture_color * in_color;
		}
		color.rgb = mix(color.rgb, v_mix_color.rgb, v_mix_weight);
	}
	else {
		mix_color *= in_color.a;
		color = in_color;
		color.rgb = mix(color.rgb, mix_color.rgb, v_mix_weight);
	}

	if((v_flags & 4) != 0) {
		float smoothness = v_draw_size.y;
		float d = distance(v_local_uv, vec2(0.5));
		float a = smoothstep(0.49, smoothness, d);
		color.rgb *= a;
		color.a *= a;
	}

	if(v_effect_id == 5) {
		color.rgb = vec3(0.0);
		vec2 uv = v_local_uv;
		float center = 0.5;
		center += sin(uv.x * 21.2 + time * 20.0) * 0.1;
		float d = abs(uv.y - center);
		float s0 = smoothstep(0.2, 0.1, d);
		float s1 = smoothstep(0.5, 0.2, d);
		color.rgb += vec3(s0);
		color += in_color * s1;

		vec2 p = vec2(gl_FragCoord.x, u_base_res.y - gl_FragCoord.y);
		d = distance(v_pos.xy, p);
		d = min(distance(v_draw_size, p), d);
		float a = smoothstep(0.0, 32.0, d);
		color.rgb *= a;
		color.a *= a;
		// color.a *= smoothstep(64.0, 0.0, d);
	}

	// color = pma(color);
	if(color.a <= 0.0) { discard; }

	out_color = color;
}
