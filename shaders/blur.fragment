
flat in int v_flags;
flat in int v_effect_id;
in float v_mix_weight;
in vec3 v_pos;
in vec2 v_origin_offset;
in vec2 v_draw_size;
in vec2 v_texture_size;
in vec2 v_uv_min;
in vec2 v_uv_max;
in vec4 v_color;
in vec4 v_mix_color;

in vec2 v_uv;
in vec2 v_local_uv;

out vec4 out_color;

uniform vec2 base_res;
uniform vec2 window_size;
uniform float time;
uniform vec2 player_pos;
uniform vec2 mouse;
uniform vec2 snake_pos;
uniform vec2 ball_rot;
uniform float snake_apple_time;

uniform sampler2D in_texture;
uniform sampler2D noise;
uniform vec3 cam_pos;

// @Note(tkap, 23/02/2023): https://stackoverflow.com/a/64845819/6488590
vec3 gaussian_blur(vec2 uv, float r, sampler2D in_texture)
{
	vec2 resolution = vec2(800.0, 800.0) * 0.25;
	vec2 pos = uv * 2.0 - vec2(1.0);
	float x,y,xx,yy,dx,dy,w,w0;
	float rr=r*r;
	w0=0.3780/pow(r,1.975);
	vec2 p;
	vec3 color=vec3(0.0,0.0,0.0);
	for(dx=1.0/resolution.x,x=-r,p.x=0.5+(pos.x*0.5)+(x*dx);x<=r;x++,p.x+=dx)
	{
		xx=x*x;
		for(dy=1.0/resolution.y,y=-r,p.y=0.5+(pos.y*0.5)+(y*dy);y<=r;y++,p.y+=dy)
		{
			yy=y*y;
			if(xx+yy<=rr)
			{
				w=w0*exp((-xx-yy)/(2.0*rr));
				color += texture(in_texture,p).rgb*w;
			}
		}
	}
	return color;
}


void main()
{
	vec4 texture_color = texture(in_texture, v_local_uv * 4.0);
	vec3 color = gaussian_blur(v_local_uv * 4.0, 8.0, in_texture);
	out_color = vec4(color, 1.0);
}
